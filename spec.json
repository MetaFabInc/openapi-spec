{"openapi":"3.0.0","info":{"title":"MetaFab API","version":"1.0.0","description":" Complete MetaFab API references and guides can be found at: https://trymetafab.com","termsOfService":"https://trymetafab.com","contact":{"name":"MetaFab Team","email":"metafabproject@gmail.com","url":"https://trymetafab.com"}},"servers":[{"description":"MetaFab API Server","url":"https://api.trymetafab.com"}],"components":{"parameters":{"headerGameKey":{"name":"X-Game-Key","in":"header","description":"The `publishedKey` of a specific game. This can be shared or included in game clients, websites, etc.","example":"game_pk_4SOqpDi8pQdnQgfCOBW29qR8YmwOhxVPz5iHoMgUEJLDdPXgwLuHqZf8ewo2GajZ","required":true,"schema":{"type":"string"}},"headerAuthorizationGame":{"name":"X-Authorization","in":"header","description":"The `secretKey` of the authenticating game.","example":"game_sk_02z4Mv3c85Ig0gNowY9Dq0N2kjb1xwzr27ArLE0669RrRI6dLf822iPO26K1p1FP","required":true,"schema":{"type":"string"}},"headerAuthorizationPlayer":{"name":"X-Authorization","in":"header","description":"The `accessToken` of the authenticating player.","example":"player_at_02z4Mv3c85Ig0gNowY9Dq0N2kjb1xwzr27ArLE0669RrRI6dLf822iPO26K1p1FP","required":true,"schema":{"type":"string"}},"headerAuthorizationGameOrPlayer":{"name":"X-Authorization","in":"header","description":"The `secretKey` of a specific game or the `accessToken` of a specific player.","example":["game_sk_02z4Mv3c85Ig0gNowY9Dq0N2kjb1xwzr27ArLE0669RrRI6dLf822iPO26K1p1FP","player_at_02z4Mv3c85Ig0gNowY9Dq0N2kjb1xwzr27ArLE0669RrRI6dLf822iPO26K1p1FP"],"required":true,"schema":{"type":"string"}},"headerPasswordGame":{"name":"X-Password","in":"header","description":"The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.","example":"mySecurePassword","required":true,"schema":{"type":"string"}},"headerPasswordPlayer":{"name":"X-Password","in":"header","description":"The password of the authenticating player. Required to decrypt and perform blockchain transactions with the player primary wallet.","example":"mySecurePassword","required":true,"schema":{"type":"string"}},"headerPasswordGameOrPlayer":{"name":"X-Password","in":"header","description":"The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.","example":"mySecurePassword","required":true,"schema":{"type":"string"}},"pathContractId":{"name":"contractId","in":"path","description":"Any contract id within the MetaFab ecosystem.","required":true,"schema":{"type":"string"}},"pathCurrencyId":{"name":"currencyId","in":"path","description":"Any currency id within the MetaFab ecosystem.","required":true,"schema":{"type":"string"}},"pathGameId":{"name":"gameId","in":"path","description":"Any game id within the MetaFab ecosystem.","required":true,"schema":{"type":"string"}},"pathTransactionId":{"name":"transactionId","in":"path","description":"Any transaction id within the MetaFab ecosystem.","required":true,"schema":{"type":"string"}},"pathPlayerId":{"name":"playerId","in":"path","description":"Any player id within the MetaFab ecosystem.","required":true,"schema":{"type":"string"}},"pathWalletId":{"name":"walletId","in":"path","description":"Any wallet id within the MetaFab ecosystem.","required":true,"schema":{"type":"string"}},"queryAddress":{"name":"address","in":"query","description":"A valid EVM based address. For example, `0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D`.","example":"0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D","required":false,"schema":{"type":"string"}},"queryArgs":{"name":"args","in":"query","description":"A comma seperated list of basic data type arguments. This is optional and only necessary if the function being invoked requires arguments per the contract ABI. For example, `123,\"Hello\",false`.","example":"123,\"Hello\",false","required":false,"schema":{"type":"string"}},"queryFunc":{"name":"func","in":"query","description":"A contract function name. This can be any valid function from the the ABI of the contract you are interacting with. For example, `balanceOf`.","required":true,"schema":{"type":"string"}},"queryWalletId":{"name":"walletId","in":"query","description":"Any wallet id within the MetaFab ecosystem.","required":false,"schema":{"type":"string"}}},"responses":{"400":{"description":"An API level error occurred. This is often due to problematic data being provided by you.","content":{"application/json":{"schema":{"type":"string"}}}},"401":{"description":"An authorization error occured. This is often due to incorrect tokens or keys being provided, or accessing a resource that the provided tokens or keys do not have access to.","content":{"application/json":{"schema":{"type":"string"}}}}},"schemas":{"GameModel":{"type":"object","properties":{"id":{"type":"string","description":"This field has not had a description added."},"walletId":{"type":"string","description":"This field has not had a description added."},"fundingWalletId":{"type":"string","description":"This field has not had a description added."},"email":{"type":"string","description":"This field has not had a description added."},"name":{"type":"string","description":"This field has not had a description added."},"rpcs":{"type":"object","description":"This field has not had a description added."},"publishedKey":{"type":"string","description":"This field has not had a description added."},"secretKey":{"type":"string","description":"This field has not had a description added."},"updatedAt":{"type":"string","description":"This field has not had a description added."},"createdAt":{"type":"string","description":"This field has not had a description added."}}},"PlayerModel":{"type":"object","properties":{"id":{"type":"string","description":"This field has not had a description added."},"gameId":{"type":"string","description":"This field has not had a description added."},"walletId":{"type":"string","description":"This field has not had a description added."},"username":{"type":"string","description":"This field has not had a description added."},"accessToken":{"type":"string","description":"This field has not had a description added."},"updatedAt":{"type":"string","description":"This field has not had a description added."},"createdAt":{"type":"string","description":"This field has not had a description added."}}},"WalletModel":{"type":"object","properties":{"id":{"type":"string","description":"This field has not had a description added."},"address":{"type":"string","description":"This field has not had a description added."}}},"CurrencyModel":{"type":"object","properties":{"id":{"type":"string","description":"This field has not had a description added."},"gameId":{"type":"string","description":"This field has not had a description added."},"contractId":{"type":"string","description":"This field has not had a description added."},"name":{"type":"string","description":"This field has not had a description added."},"symbol":{"type":"string","description":"This field has not had a description added."},"supplyCap":{"type":"integer","description":"This field has not had a description added."},"updatedAt":{"type":"string","description":"This field has not had a description added."},"createdAt":{"type":"string","description":"This field has not had a description added."}}},"ContractModel":{"type":"object","properties":{"id":{"type":"string","description":"This field has not had a description added."},"gameId":{"type":"string","description":"This field has not had a description added."},"chain":{"type":"string","description":"This field has not had a description added."},"abi":{"type":"object","description":"This field has not had a description added."},"type":{"type":"string","description":"This field has not had a description added."},"address":{"type":"string","description":"This field has not had a description added."},"updatedAt":{"type":"string","description":"This field has not had a description added."},"createdAt":{"type":"string","description":"This field has not had a description added."}}},"TransactionModel":{"type":"object","properties":{"id":{"type":"string","description":"This field has not had a description added."},"contractId":{"type":"string","description":"This field has not had a description added."},"walletId":{"type":"string","description":"This field has not had a description added."},"function":{"type":"string","description":"This field has not had a description added."},"args":{"type":"object","description":"This field has not had a description added."},"hash":{"type":"string","description":"This field has not had a description added."},"updatedAt":{"type":"string","description":"This field has not had a description added."},"createdAt":{"type":"string","description":"This field has not had a description added."}}},"AnyValue":{"description":"Can be anything. String, number, object, array, boolean, etc."}},"securitySchemes":{"basicAuth":{"type":"http","scheme":"basic"}}},"tags":[{"name":"Contracts","description":"Contract related operations"},{"name":"Currencies","description":"Currency related operations"},{"name":"Games","description":"Game related operations"},{"name":"Transactions","description":"Transaction related operations"},{"name":"Players","description":"Player related operations"},{"name":"Wallets","description":"Wallet related operations"}],"paths":{"/v1/contracts":{"get":{"operationId":"getContracts","summary":"Get contracts","description":"Returns an array of active contracts deployed by the game associated with the provided `X-Game-Key`.","tags":["Contracts"],"parameters":[{"$ref":"#/components/parameters/headerGameKey"}],"responses":{"200":{"description":"Successfully retrieved an array of contracts for the game associated with the provided `X-Game-Key`.","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/ContractModel"}}}}},"400":{"$ref":"#/components/responses/400"}}},"post":{"operationId":"createContract","summary":"Create custom contract","description":"Create a MetaFab custom contract entry from an existing contract address and contract abi. This allows the game and players belonging to the authenticated game to interact with the contract's read and write functions through MetaFab's read and write contract endpoints.","tags":["Contracts"],"parameters":[{"$ref":"#/components/parameters/headerAuthorizationGame"}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"type":"object","properties":{"address":{"type":"string","description":"The address of the existing contract."},"abi":{"type":"string","description":"JSON of the abi."},"chain":{"type":"string","description":"The blockchain you want to deploy this currency on. Support for new blockchains are added over time.","example":"MATIC","enum":["ETHEREUM","GOERLI","MATIC","MUMBAI"]}},"required":["address","abi","chain"]}}}},"responses":{"200":{"description":"Successfully created a MetaFab contract entry. Returns a contract object.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ContractModel"}}}},"400":{"$ref":"#/components/responses/400"},"401":{"$ref":"#/components/responses/401"}}}},"/v1/contracts/{contractId}/reads":{"get":{"operationId":"readContract","summary":"Read contract data","description":"Oftentimes you'll want to query and retrieve some data from a contract. This is incredibly easy to do for any contract deployed through MetaFab.\n\nUsing this endpoint, you can get the data returned by any readable function listed in a contracts ABI. This could be things like querying the totalSupply of a currency contract, the number of owners of an items contract, and more.","tags":["Contracts"],"parameters":[{"$ref":"#/components/parameters/pathContractId"},{"$ref":"#/components/parameters/queryFunc"},{"$ref":"#/components/parameters/queryArgs"}],"responses":{"200":{"description":"Successfully retrieved value returned by contract function.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/AnyValue"}}}},"400":{"$ref":"#/components/responses/400"}}}},"/v1/contracts/{contractId}/writes":{"post":{"operationId":"writeContract","summary":"Write contract data","description":"MetaFab's convenience endpoints for contract interactions may not be flexible enough depending on your use case. For these situations, you can interact with contracts and create transactions directly.\n\nUsing this endpoint, you can execute a transaction for any writeable contract method as defined in the contract's ABI for the MetaFab contractId provided. Both Games and Player resources have authority to use this endpoint to execute transactions against any valid MetaFab contractId.\n\nAdditionally, MetaFab will automatically attempt to perform a gasless transaction for players interacting with a contract through this endpoint. Gasless transactions by players through this endpoint will only work if the target contract was deployed through MetaFab or supports MetaFab's ERC2771 trusted forwarder contract.","tags":["Contracts"],"parameters":[{"$ref":"#/components/parameters/pathContractId"},{"$ref":"#/components/parameters/headerAuthorizationGameOrPlayer"},{"$ref":"#/components/parameters/headerPasswordGameOrPlayer"}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"type":"object","properties":{"func":{"type":"string","description":"A contract function name. This can be any valid function from the the ABI of the contract you are interacting with. For example, `mint`."},"args":{"type":"string","description":"An array of args. This is optional and only necessary if the function being invoked requires arguments per the contract ABI. For example, `[123, \"Hello\", false]`."}},"required":["func"]}}}},"responses":{"200":{"description":"Successfully executed and confirmed the transaction. Returns a transaction object.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TransactionModel"}}}},"400":{"$ref":"#/components/responses/400"},"401":{"$ref":"#/components/responses/401"}}}},"/v1/currencies":{"get":{"operationId":"getCurrencies","summary":"Get currencies","description":"Returns an array of active currencies for the game associated with the provided `X-Game-Key`.","tags":["Currencies"],"parameters":[{"$ref":"#/components/parameters/headerGameKey"}],"responses":{"200":{"description":"Successfully retrieved an array of currencies for the game associated with the provided `X-Game-Key`","content":{"application/json":{"schema":{"type":"array","items":{"allOf":[{"$ref":"#/components/schemas/CurrencyModel"},{"type":"object","properties":{"contract":{"$ref":"#/components/schemas/ContractModel"}}}]}}}}},"400":{"$ref":"#/components/responses/400"}}},"post":{"operationId":"createCurrency","summary":"Create currency","description":"Creates a new game currency and deploys an ERC20 token contract on behalf of the authenticating game's primary wallet. The deployed ERC20 contract is preconfigured to fully support bridging across blockchains, batched transfers and gasless transactions on any supported blockchain as well as full support for gasless transactions from player managed wallets.","tags":["Currencies"],"parameters":[{"$ref":"#/components/parameters/headerAuthorizationGame"},{"$ref":"#/components/parameters/headerPasswordGame"}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"type":"object","properties":{"name":{"type":"string","description":"The name of this currency. This can be anything, such as `Bright Gems`, `Gold`, etc.","example":"Bright Gems"},"symbol":{"type":"string","description":"The shorthand symbol to represent this currency. This can be anything, such as `BGEM`, `GLD`, etc.","example":"BGEM"},"supplyCap":{"type":"number","description":"The maximum amount of this currency that can ever exist. Use `0` if you do not want this currency to have a maximum supply.","example":15000.5},"chain":{"type":"string","description":"The blockchain you want to deploy this currency on. Support for new blockchains are added over time.","example":"MATIC","enum":["ETHEREUM","GOERLI","MATIC","MUMBAI"]}},"required":["name","symbol","supplyCap","chain"]}}}},"responses":{"200":{"description":"Successfully created a new currency and deployed its associated ERC20 token contract on the chain specified. Returns a currency object containing a contract property with the deployment transaction.","content":{"application/json":{"schema":{"allOf":[{"$ref":"#/components/schemas/CurrencyModel"},{"type":"object","properties":{"contract":{"allOf":[{"$ref":"#/components/schemas/ContractModel"},{"type":"object","properties":{"transactions":{"type":"array","items":{"$ref":"#/components/schemas/TransactionModel"}}}}]}}}]}}}},"400":{"$ref":"#/components/responses/400"},"401":{"$ref":"#/components/responses/401"}}}},"/v1/currencies/{currencyId}/balances":{"get":{"operationId":"getCurrencyBalances","summary":"Get currency balance","description":"Returns the current currency balance of the provided wallet address or or the wallet address associated with the provided walletId.","tags":["Currencies"],"parameters":[{"$ref":"#/components/parameters/pathCurrencyId"},{"$ref":"#/components/parameters/queryAddress"},{"$ref":"#/components/parameters/queryWalletId"}],"responses":{"200":{"description":"Successfully retrieved currency balance for the provided address or walletId. Balance is returned as a string to handle uint256 numbers.","content":{"application/json":{"schema":{"type":"number"}}}},"400":{"$ref":"#/components/responses/400"}}}},"/v1/currencies/{currencyId}/batchTransfers":{"post":{"operationId":"batchTransferCurrency","summary":"Batch transfer currency","description":"Transfers multiple amounts of currency to multiple provided wallet addresses or wallet addresses associated with the provided walletIds. You may also provide a combination of addresses and walletIds in one request, the proper receipients will be automatically determined, with `addresses` getting `amounts` order priority first.\nOptional references may be included for the transfer. References are useful for identifying transfers intended to pay for items, trades, services and more.","tags":["Currencies"],"parameters":[{"$ref":"#/components/parameters/pathCurrencyId"},{"$ref":"#/components/parameters/headerAuthorizationGameOrPlayer"},{"$ref":"#/components/parameters/headerPasswordGameOrPlayer"}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"type":"object","properties":{"addresses":{"type":"array","description":"An array of valid EVM based addresses to transfer currency to.","items":{"type":"string"}},"walletIds":{"type":"array","description":"An array of wallet ids within the MetaFab ecosystem to transfer currency to.","items":{"type":"string"}},"amounts":{"type":"array","description":"An array of currency amounts to transfer. Ordering corresponds to the ordering of provided `addresses` and/or `walletIds`. If both `addresses` and `walletIds` are provided, `addresses` are first in the order.","items":{"type":"number","example":10}},"references":{"type":"array","description":"An optional array of uint256 numbers to reference each transfer in the batch. Ordering corresponds to the ordering of provided `addresses` or `walletIds`. If both `addresses` and `walletIds` are provided, `addresses` are first in the order.","items":{"type":"number"}}},"required":["amounts"]}}}},"responses":{"200":{"description":"Successfully transferred the currency amounts to the provided wallet addresses and/or wallet addresses of the provided walletIds. Returns a transaction object.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TransactionModel"}}}},"400":{"$ref":"#/components/responses/400"},"401":{"$ref":"#/components/responses/401"}}}},"/v1/currencies/{currencyId}/burns":{"post":{"operationId":"burnCurrency","summary":"Burn currency","description":"Removes (burns) the provided amount of currency from the authenticating game or players wallet. The currency amount is permanently removed from the circulating supply of the currency.","tags":["Currencies"],"parameters":[{"$ref":"#/components/parameters/pathCurrencyId"},{"$ref":"#/components/parameters/headerAuthorizationGameOrPlayer"},{"$ref":"#/components/parameters/headerPasswordGameOrPlayer"}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"type":"object","properties":{"amount":{"type":"number","description":"The amount of currency to remove (burn). The currency balance of the authenticating game or player's wallet must be equal to or greater than this amount.","example":133.7}},"required":["amount"]}}}},"responses":{"200":{"description":"Successfully removed (burned) the currency amount from the authenticating game or player's wallet. Returns a transaction object.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TransactionModel"}}}},"400":{"$ref":"#/components/responses/400"},"401":{"$ref":"#/components/responses/401"}}}},"/v1/currencies/{currencyId}/fees":{"get":{"operationId":"getCurrencyFees","summary":"Get currency fees","description":"Returns the current fee recipient address and fees of the currency for the provided currencyId. Fees are only applicable for gasless transactions performed by default by players.","tags":["Currencies"],"parameters":[{"$ref":"#/components/parameters/pathCurrencyId"}],"responses":{"200":{"description":"Successfully retrieved currency fees for the currency of the provided currencyId.","content":{"application/json":{"schema":{"type":"object","properties":{"recipientAddress":{"description":"The wallet address that fees from all applicable transactions are automatically sent to.","type":"string"},"basisPoints":{"description":"The number of fee basis points. 100 basisPoints = 1% fee of the total transaction amount deducted from the total received by the recipient.","type":"number"},"fixedAmount":{"description":"The fixed number of currency as a fee regardless of the total transaction amount. 10 = 10 of the currency as a fee for any transaction, deducted from the total received by the recipient.","type":"number"},"capAmount":{"description":"The maximum combined fee between basisPoints and fixedAmount. If the total transaction fee is over this amount, the capAmount will be used as the transaction fee deducted from the total received by the recipient.","type":"number"}}}}}},"400":{"$ref":"#/components/responses/400"}}},"post":{"operationId":"setCurrencyFees","summary":"Set currency fees","description":"Sets the recipient address, basis points, fixed amount and cap amount for a currency's fees.","tags":["Currencies"],"parameters":[{"$ref":"#/components/parameters/pathCurrencyId"},{"$ref":"#/components/parameters/headerAuthorizationGame"},{"$ref":"#/components/parameters/headerPasswordGame"}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"type":"object","properties":{"recipientAddress":{"type":"string","description":"The recipient address of currency transaction fees."},"basisPoints":{"type":"number","description":"A percentage fee for every transaction represented in basis points. To set a 1.5% fee, you would use a value of 150. This value can be 0, denoting no percentage fees."},"fixedAmount":{"type":"number","description":"A fixed fee for every transaction. A value of 0.5 would mean 0.5 of the currency of a transaction is always taken as a fee. This value can be 0, denoting no fixed fees."},"capAmount":{"type":"number","description":"The maximum fee amount for any single transaction. The total fee of a transaction is calculated as the sum of the basis points (percentage) fee, and fixed fee. If a calculated fee is greater than this maximum fee value, the maximum fee will be used instead."}},"required":["recipientAddress","basisPoints","fixedAmount","capAmount"]}}}},"responses":{"200":{"description":"Successfuly set the currency's fees. Returns a transaction object.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TransactionModel"}}}},"400":{"$ref":"#/components/responses/400"},"401":{"$ref":"#/components/responses/401"}}}},"/v1/currencies/{currencyId}/mints":{"post":{"operationId":"mintCurrency","summary":"Mint currency","description":"Creates (mints) the provided amount of currency  to the provided wallet address or wallet address associated with the provided walletId.","tags":["Currencies"],"parameters":[{"$ref":"#/components/parameters/pathCurrencyId"},{"$ref":"#/components/parameters/headerAuthorizationGame"},{"$ref":"#/components/parameters/headerPasswordGame"}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"type":"object","properties":{"amount":{"type":"number","description":"The amount of currency to create (mint).","example":133.7},"address":{"type":"string","description":"A valid EVM based address to create (mint) currency for. For example, `0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D`."},"walletId":{"type":"string","description":"Any wallet id within the MetaFab ecosystem to create (mint) currency for."}},"required":["amount"]}}}},"responses":{"200":{"description":"Successfully created (minted) the currency amount to the provided wallet address or wallet address of the provided walletId. Returns a transaction object.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TransactionModel"}}}},"400":{"$ref":"#/components/responses/400"},"401":{"$ref":"#/components/responses/401"}}}},"/v1/currencies/{currencyId}/transfers":{"post":{"operationId":"transferCurrency","summary":"Transfer currency","description":"Transfers an amount of currency to the provided wallet address or wallet address associated with the provided walletId. If you want to transfer to multiple wallets with different amounts and optional references in one API request, please see the Batch transfer currency documentation.\n\nAn optional reference may be included for the transfer. References are useful for identifying transfers intended to pay for items, trades, services and more.","tags":["Currencies"],"parameters":[{"$ref":"#/components/parameters/pathCurrencyId"},{"$ref":"#/components/parameters/headerAuthorizationGameOrPlayer"},{"$ref":"#/components/parameters/headerPasswordGameOrPlayer"}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"type":"object","properties":{"address":{"type":"string","description":"A valid EVM based address to transfer currency to. For example, `0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D`."},"walletId":{"type":"string","description":"Any wallet id within the MetaFab ecosystem to transfer currency to."},"amount":{"type":"number","description":"The amount of currency to transfer.","example":133.7},"reference":{"type":"number","description":"An optional uint256 number to reference the transfer. Commonly used to identify transfers intended to pay for game items or services.","example":1242}},"required":["amount"]}}}},"responses":{"200":{"description":"Successfully transferred the currency amount to the provided wallet address or wallet address of the provided wallet Id. Returns a transaction object.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TransactionModel"}}}},"400":{"$ref":"#/components/responses/400"},"401":{"$ref":"#/components/responses/401"}}}},"/v1/games":{"get":{"operationId":"authGame","summary":"Authenticate game","description":"Returns an existing game object containing authorization keys and credentials when provided a valid email (in place of username) and password login using Basic Auth.","tags":["Games"],"security":[{"basicAuth":[]}],"responses":{"200":{"description":"Succesfully authorized the request and retrieved a game object containing authorization keys and credentials.","content":{"application/json":{"schema":{"allOf":[{"$ref":"#/components/schemas/GameModel"},{"type":"object","properties":{"wallet":{"$ref":"#/components/schemas/WalletModel"}}},{"type":"object","properties":{"fundingWallet":{"$ref":"#/components/schemas/WalletModel"}}}]}}}},"400":{"$ref":"#/components/responses/400"},"401":{"$ref":"#/components/responses/401"}}},"post":{"operationId":"createGame","summary":"Create game","description":"Create a new game. A game is the root entity required for all API interactions. Contracts, currencies, items and more are deployed by games, player accounts are created and registered to games, etc.\n\nTo use any of MetaFab's services, you must first create a game through this endpoint.\n\n**Game creation is limited during our closed beta. Please contact ArkDev#4501 on Discord to be a part of our beta.**","tags":["Games"],"requestBody":{"required":true,"content":{"application/json":{"schema":{"type":"object","properties":{"name":{"type":"string","description":"The name of the game you're creating.","example":"NFT Worlds"},"email":{"type":"string","description":"The email address associated with this game and used to login/authenticate as the game.","format":"email","example":"dev@nftworlds.com"},"password":{"type":"string","description":"The password to authenticate as the game. Additionally, this password is used to encrypt/decrypt your game's primary wallet and must be provided anytime this game makes blockchain interactions through various endpoints.","format":"password","example":"aReallyStrongPassword123!"}},"required":["name","email","password"]}}}},"responses":{"200":{"description":"Successfully created a new game. Returns a game object containing a wallet and fundingWallet property, respectively representing the games primary wallet address (used to deploy & interact with contract) and funding wallet address (used to cover gasless transaction fees).","content":{"application/json":{"schema":{"allOf":[{"$ref":"#/components/schemas/GameModel"},{"type":"object","properties":{"wallet":{"$ref":"#/components/schemas/WalletModel"}}},{"type":"object","properties":{"fundingWallet":{"$ref":"#/components/schemas/WalletModel"}}}]}}}},"400":{"$ref":"#/components/responses/400"},"401":{"$ref":"#/components/responses/401"}}}},"/v1/games/{gameId}":{"patch":{"operationId":"updateGame","summary":"Update game","description":"Update various fields specific to a game. Such as changing its password, resetting its published or secret key, or updating its RPCs.","tags":["Games"],"parameters":[{"$ref":"#/components/parameters/pathGameId"},{"$ref":"#/components/parameters/headerAuthorizationGame"}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"type":"object","properties":{"name":{"type":"string","description":"A new name. Replaces the game's current name."},"email":{"type":"string","description":"A new email address. The game's old email will no longer be valid for account authentication. currentPassword must also be provided.","format":"email"},"currentPassword":{"type":"string","description":"The game's current password. Must be provided if setting `newPassword`.","format":"password"},"newPassword":{"type":"string","description":"A new password. The game's old password will no longer be valid.","format":"password"},"rpcs":{"type":"object","description":"Sets a custom RPC for your game to use instead of MetaFab's default RPCs for the chain(s) you specify.\n\nExpects a JSON object containing key value pairs of supported `chain` -> `rpc url`. Only the chain names provided as keys in the object will be explicitly overriden. To delete a custom RPC for your game, provide the chain name to delete as a key in the provided object and `null` as the value.\n\nSet RPC example, `{ MATIC: 'https://polygon-rpc.com' }`\nDelete RPC example, `{ MATIC: null }`","additionalProperties":{"type":"string"},"example":"https://polygon-rpc.com"},"resetPublishedKey":{"type":"boolean","description":"Revokes the game's previous published key and returns a new one if true."},"resetSecretKey":{"type":"boolean","description":"Revokes the game's previous secret key and returns a new on if true."}}}}}},"responses":{"200":{"description":"Returns the updated game object.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GameModel"}}}},"400":{"$ref":"#/components/responses/400"},"401":{"$ref":"#/components/responses/401"}}}},"/v1/players":{"get":{"operationId":"authPlayer","summary":"Authenticate player","description":"Returns an existing player object containing access token, wallet, and other details for a game when provided a valid username and password login using Basic Auth.","tags":["Players"],"parameters":[{"$ref":"#/components/parameters/headerGameKey"}],"security":[{"basicAuth":[]}],"responses":{"200":{"description":"Succesfully authorized the request and retrieved a player object containing access token, wallet, and other details.","content":{"application/json":{"schema":{"allOf":[{"$ref":"#/components/schemas/PlayerModel"},{"type":"object","properties":{"wallet":{"$ref":"#/components/schemas/WalletModel"}}}]}}}},"400":{"$ref":"#/components/responses/400"},"401":{"$ref":"#/components/responses/401"}}},"post":{"operationId":"createPlayer","summary":"Create player","description":"Create a new player for a game. Players are automatically associated with an internally managed wallet.\n\nPlayer access tokens can be used to directly interact with any MetaFab managed contracts, currencies, items collections, marketplaces and more. Player interactions are also gasless by default, completely removing all crypto friction for players to engage with your MetaFab supported games.","tags":["Players"],"parameters":[{"$ref":"#/components/parameters/headerGameKey"}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"type":"object","properties":{"username":{"type":"string","description":"The players username, used to authenticate the player and if desired represent them in game. Usernames are unique. There cannot be 2 users with the same username created for a game."},"password":{"type":"string","description":"The password to authenticate as the player. Additionally, this password is used to encrypt/decrypt a player's primary wallet and must be provided anytime this player makes blockchain interactions through various endpoints.","format":"password","example":"aReallyStrongPassword123"}},"required":["username","password"]}}}},"responses":{"200":{"description":"Successfully created a new player. Returns a player object containing a wallet (used to interact with contracts, currencies, etc).","content":{"application/json":{"schema":{"allOf":[{"$ref":"#/components/schemas/PlayerModel"},{"type":"object","properties":{"wallet":{"$ref":"#/components/schemas/WalletModel"}}}]}}}},"400":{"$ref":"#/components/responses/400"},"401":{"$ref":"#/components/responses/401"}}}},"/v1/players/{playerId}":{"patch":{"operationId":"updatePlayer","summary":"Update player","description":"Update various fields specific to a player. Such as changing its password and resetting its access token.","tags":["Players"],"parameters":[{"$ref":"#/components/parameters/pathPlayerId"},{"$ref":"#/components/parameters/headerAuthorizationPlayer"}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"type":"object","properties":{"currentPassword":{"type":"string","description":"The player's current password. Must be provided if setting `newPassword`.","format":"password"},"newPassword":{"type":"string","description":"A new password. The player's old password will no longer be valid.","format":"password"},"resetAccessToken":{"type":"boolean","description":"Revokes the player's previous access token and returns a new one if true."}}}}}},"responses":{"200":{"description":"Returns the updated player object.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/PlayerModel"}}}},"400":{"$ref":"#/components/responses/400"},"401":{"$ref":"#/components/responses/401"}}}},"/v1/transactions/{transactionId}":{"get":{"operationId":"getTransaction","summary":"Get transaction","description":"Returns an executed transaction object for the provided transactionId. Transactions are created by MetaFab when interacting with contracts, currencies, items and other MetaFab resources.","tags":["Transactions"],"parameters":[{"$ref":"#/components/parameters/pathTransactionId"}],"responses":{"200":{"description":"Successfully retrieved a transaction object for the provided transactionId.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TransactionModel"}}}},"400":{"$ref":"#/components/responses/400"}}}},"/v1/wallets/{walletId}/balances":{"get":{"operationId":"getWalletBalances","summary":"Get wallet balances","description":"Returns the current native token balance for all chains supported by MetaFab for the provided walletId. This includes balances like Eth, Matic and other native tokens from chains MetaFab supports.","tags":["Wallets"],"parameters":[{"$ref":"#/components/parameters/pathWalletId"}],"responses":{"200":{"description":"Successfully retrieved native token balances of the provided walletId's address for each chain supported by MetaFab.","content":{"application/json":{"schema":{"type":"object","additionalProperties":{"type":"number"}}}}},"400":{"$ref":"#/components/responses/400"}}}},"/v1/wallets/{walletId}/transactions":{"get":{"operationId":"getWalletTransactions","summary":"Get wallet transactions","description":"Returns an array of MetaFab initiated transactions performed by the provided walletId. Transactions returned are ordered chronologically from newest to oldest.","tags":["Wallets"],"parameters":[{"$ref":"#/components/parameters/pathWalletId"}],"responses":{"200":{"description":"Successfully retrieved an array of transactions performed by the provided walletId.","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/TransactionModel"}}}}},"400":{"$ref":"#/components/responses/400"}}}}}}